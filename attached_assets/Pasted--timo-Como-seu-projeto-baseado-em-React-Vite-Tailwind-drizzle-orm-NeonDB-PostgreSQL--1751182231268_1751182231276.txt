√ìtimo! Como seu projeto √© baseado em **React + Vite + Tailwind + drizzle-orm + NeonDB (PostgreSQL)**, aqui est√° um **plano de implementa√ß√£o pr√°tico** para a p√°gina "Solicita√ß√µes de Compras" totalmente integrado ao seu stack. Isso inclui estrutura do backend, frontend e banco de dados.

---

## ‚úÖ 1. Banco de Dados (PostgreSQL com Drizzle ORM)

### Tabela: `solicitacoes`

```ts
// db/schema/solicitacoes.ts
import { pgTable, text, date, boolean, uuid } from "drizzle-orm/pg-core";

export const solicitacoes = pgTable("solicitacoes", {
  id: uuid("id").defaultRandom().primaryKey(),
  produto: text("produto").notNull(),
  quantidade: text("quantidade").notNull(),
  observacao: text("observacao"),
  responsavel: text("responsavel").notNull(),
  data: date("data").notNull(),
  andamento: text("andamento"),
  finalizadoPor: text("finalizado_por"),
  status: text("status").default("nova"), // nova | andamento | finalizada
  urgente: boolean("urgente").default(false),
  dataCriacao: date("data_criacao").defaultNow(),
});
```

---

## ‚úÖ 2. Backend com Express + drizzle-orm

### Rota: `POST /api/solicitacoes`

* Cria nova solicita√ß√£o

### Rota: `GET /api/solicitacoes`

* Lista solicita√ß√µes com filtros e pagina√ß√£o

### Rota: `PATCH /api/solicitacoes/:id`

* Edita status, andamento, finaliza√ß√£o, etc.

### Middleware:

* Verifica se o usu√°rio √© `superadmin` ou `admin_fazenda`

---

## ‚úÖ 3. Frontend React (com Tailwind + React Query + Radix)

### Menu lateral (Sidebar)

```tsx
// components/Sidebar.tsx
<Link href="/solicitacoes" className="relative">
  Solicita√ß√µes de Compras
  {temSolicitacoesUrgentes && <span className="absolute top-0 right-0 text-red-500">‚ö†Ô∏è</span>}
</Link>
```

---

### P√°gina `/solicitacoes`

#### ‚úÖ Componente de Formul√°rio

Usando `react-hook-form`, `zod`, `@radix-ui/dialog`:

* Produto, Quantidade, Observa√ß√£o, Respons√°vel, Data (com m√°scara)
* Checkbox ‚ÄúUrgente‚Äù
* Bot√£o ‚ÄúCadastrar‚Äù ‚Üí cria nova solicita√ß√£o via React Query Mutation

#### ‚úÖ Lista de Cards

Cada solicita√ß√£o exibe:

* Produto, Quantidade, Respons√°vel
* Status (`Nova`, `Em Andamento`, `Finalizada`)
* √çcones de a√ß√µes: ‚úèÔ∏è Editar | üîÑ Andamento | ‚úÖ Finalizar
* ‚ö†Ô∏è Se urgente

#### ‚úÖ Modal "Andamento"

* Campo de texto
* Atualiza campo `andamento` e `status = andamento`

#### ‚úÖ Modal "Finalizar"

* Campo de texto (`finalizadoPor`)
* Atualiza status para `finalizada` + `inativa`

#### ‚úÖ Modal "Editar ap√≥s finalizado"

* Solicita senha `620048` antes de permitir edi√ß√£o

```ts
if (status === 'finalizada' && senha !== '620048') {
  return alert('Edi√ß√£o bloqueada. Solicita√ß√£o finalizada.');
}
```

---

### ‚úÖ Filtros e Pagina√ß√£o

#### Filtros:

* Produto (input texto)
* Respons√°vel (input)
* Status (dropdown)
* Urgente (checkbox)
* Data (intervalo)

#### Pagina√ß√£o:

* React Query + par√¢metros de p√°gina (`page`, `limit`)
* Bot√µes: Anterior / Pr√≥xima

---

### üîê Controle de Acesso

* P√°gina e rotas protegidas com middleware de sess√£o
* Somente `admin_fazenda` e `superadmin` t√™m acesso

---

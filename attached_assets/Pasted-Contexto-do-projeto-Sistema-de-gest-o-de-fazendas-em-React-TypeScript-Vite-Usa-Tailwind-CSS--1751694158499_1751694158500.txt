Contexto do projeto:
Sistema de gest√£o de fazendas em React + TypeScript + Vite.

Usa Tailwind CSS, Radix UI, React Hook Form + Zod, React Query, Wouter.

Backend em Node.js + Express + PostgreSQL usando Drizzle ORM.

Autentica√ß√£o com passport + express-session, session store com connect-pg-simple.

Na p√°gina animals-new, existe um modal de cadastro de animais, atualmente longo e ocupando muito espa√ßo vertical.

‚úÖ Objetivo:
Refatorar o modal de cadastro de animal em animals-new, compactando os campos para reduzir espa√ßo, melhorar usabilidade e tornar o preenchimento mais r√°pido, mantendo valida√ß√µes e responsividade.

üìå Funcionalidade a ser implementada:
1Ô∏è‚É£ Compacta√ß√£o do formul√°rio:
Organizar os campos relacionados em linhas lado a lado, mantendo legibilidade e responsividade:

Linha 1: Nome (campo √∫nico).

Linha 2: Esp√©cie | Ra√ßa | G√™nero (mesma linha, cada um em um ter√ßo da largura).

Linha 3: Data de Nascimento | Peso (kg) (mesma linha, meio a meio).

Linha 4: Estado de Sa√∫de | M√£e | Pai (mesma linha, cada um em um ter√ßo).

Linha 5: Observa√ß√µes (campo √∫nico).

Responsividade:

Usar grid-cols-1 em telas pequenas e grid-cols-2 ou grid-cols-3 em telas m√©dias/maiores.

Usar Tailwind CSS para gerenciar os grids responsivos.

2Ô∏è‚É£ Tecnologias e pr√°ticas:
‚úÖ Frontend:

Usar Radix UI Modal para o modal.

Usar React Hook Form + Zod para valida√ß√£o e controle do formul√°rio.

Usar Tailwind CSS para o layout responsivo.

Utilizar placeholders claros e opcionais em campos n√£o obrigat√≥rios.

Adicionar feedback visual em erros de valida√ß√£o.

Garantir que o modal feche automaticamente ao cadastrar, com toast de sucesso/erro.

Utilizar loading state ao submeter.

‚úÖ Backend:

Manter o endpoint atual de cria√ß√£o de animal utilizando Drizzle ORM.

Garantir que o modal envie os dados no formato esperado pelo backend.

3Ô∏è‚É£ Campos do cadastro:
Nome (text)

Esp√©cie (select)

Ra√ßa (text)

G√™nero (select)

Data de Nascimento (date)

Peso (kg) (number)

Estado de Sa√∫de (select)

M√£e (text, opcional)

Pai (text, opcional)

Observa√ß√µes (textarea, opcional)

4Ô∏è‚É£ UX desejada:
‚úÖ Modal visualmente limpo, sem scroll excessivo.
‚úÖ Cadastro r√°pido e intuitivo.
‚úÖ Valida√ß√µes claras, feedback instant√¢neo em campos inv√°lidos.
‚úÖ Integra√ß√£o fluida com React Query para atualizar a listagem ap√≥s cadastro.
‚úÖ Coer√™ncia com o padr√£o visual do Lagris.

üö¶ Crit√©rios de aceita√ß√£o:
‚úÖ Modal refatorado sem erros TypeScript.
‚úÖ Campos exibidos corretamente em grid responsivo.
‚úÖ Cadastro funcionando de ponta a ponta.
‚úÖ Feedback visual adequado (loadings, toasts, erros de campo).
‚úÖ Compatibilidade garantida com o fluxo atual de autentica√ß√£o e fazenda selecionada.